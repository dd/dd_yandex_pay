{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"DD Yandex Pay <p>Wrapper for Yandex Pay API.</p> <p>However, if someone decides to use this functionality in their project, and even more so to add functionality or change the implementation to a more correct, beautiful or understandable one, I will only be happy, do not worry and feel free to write to me by mail, create an issue or pull request on github.</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Usage</li> <li>Code Reference</li> <li>Contributing<ul> <li>Introduction</li> <li>Documentations<ul> <li>Introduction</li> <li>Examples</li> </ul> </li> </ul> </li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"dev/contributing/","title":"Contributing","text":"<p>Please don't be shy - comment, discuss and suggest whatever you think is important in the discussions on github, if you notice a bug please describe it in issues, and if you decide to contribute to the development of the project, feel free to send pull request, and if possible, read further during development this section.</p> <p>When developing, modifying and fixing a feature, please fill in and correct all annotations and docstrings in the code, and also try, if possible, to fill in / supplement the description of the functionality and its use in the section of the documentation, also add tests for new or fixed functionality, read more below:</p>"},{"location":"dev/contributing/#environment","title":"Environment","text":"<p>To work, you need a configured environment, for this there is the following script:</p> <pre><code>$ hatch run init\n</code></pre> <p>Note</p> <p>All development is done using hatch. To work with it, you will need to install it globally, I advise you to do this using pipx.</p> <p>This script will completely configure the environment - configure gitflow, connect git hooks, and install and configure a virtual environment, to run python in this environment, run the following command:</p> <pre><code>$ hatch run ipython\n</code></pre>"},{"location":"dev/contributing/#git-flow","title":"Git flow","text":"<p>As you develop and refine, please try to keep your repository consistent with gitflow.</p> <p>Question</p> <p>Probably this point will change, the library is actively developed, I took this approach as a familiar one, however, I think that it will need to be changed. If you have any suggestions I'll be happy to listen.</p>"},{"location":"dev/contributing/#tests","title":"Tests","text":"<p>When working on a project, it is extremely important to cover everything with tests in order to avoid problems and errors in the code. See working on tests in the appropriate section.</p>"},{"location":"dev/contributing/#documentation","title":"Documentation","text":"<p>The documentation is implemented using the mkdocs generator and the mkdocs material theme. When working on library functionality, it is important to expand the usage section. For more information about developing documentation, see the corresponding section.</p>"},{"location":"dev/contributing/#versioning","title":"Versioning","text":"<p>Version according to semver.</p> <p>To update the version, use hatch version</p> <p>show current version:</p> <pre><code>$ hatch version\n1.0.0a0\n</code></pre> <p>update patch and beta version from <code>1.0.0a0</code> to <code>1.0.1b0</code></p> <pre><code>$ hatch version patch,beta\nOld: 1.0.0a0\nNew: 1.0.1b0\n</code></pre>"},{"location":"dev/contributing/#commit-message-convention","title":"Commit message convention","text":"<p>To write a commit, we adhere to the Conventional Commits specification, as well as gitmoji as a special case of conventional commits. You can use gitmoji-cli for this process. This is necessary for the automatic generation of the changelog.</p> <p>Info</p> <p>The list of emoji needs to be improved, now it is bloated and there are controversial points like  which means deleting the code...</p>"},{"location":"dev/contributing/#changelog-generation","title":"Changelog generation","text":"<p>You can generate a Changelog with the following command using gitmoji-changelog:</p> <pre><code>$ hatch run changelog-update\n</code></pre>"},{"location":"dev/contributing/#building-and-publishing","title":"Building and publishing","text":"<p>For the build, hatch is used and to build the library there is the following command:</p> <pre><code>$ hatch build\n</code></pre> <p>This command is provided by hatch and for more details on how it works, it is better to look at the hatch documentation.</p> <p>The build and upload of releases is implemented in GitHub Actions and occurs automatically when pushing release tags like <code>v*</code>.</p> <p>More details on how to set up a build and upload can be found in the workflow config.</p>"},{"location":"dev/docs/","title":"Documentation","text":"<p>To develop documentation, use mkdocs with the theme mkdocs-material.</p> <p>Sources for documentation generation parse mkdocstring-python which can handle multiple formats, we use Google-style (this only applies to docstrings), but not pure, and its variation is napoleon (But of course this is a debatable issue, and we can change if there are suggestions).</p>"},{"location":"dev/docs/#local-development","title":"Local development","text":"<p>In the simplest case, running a local server with development documentation would look like this:</p> <pre><code>$ hatch run docs:serve\n</code></pre>"},{"location":"dev/docs/#configuration","title":"Configuration","text":"<p>There are several options for documentation configuration:</p>"},{"location":"dev/docs/#ddyp_mkdocs_code_parce_enabled","title":"<code>DDYP_MKDOCS_CODE_PARCE_ENABLED</code>","text":"<code>default: true</code> <p>Enabling / disabling the output of sources in the documentation \"on-the-fly\" (organized based on the example from the mkdocstrings documentation).</p>"},{"location":"dev/docs/#ddyp_mkdocs_code_parce_source_path","title":"<code>DDYP_MKDOCS_CODE_PARCE_SOURCE_PATH</code>","text":"<code>default: \"dd_yandex_pay\"</code> <p>A directory with sources for \"on-the-fly\" generation.</p>"},{"location":"dev/docs/#ddyp_mkdocs_code_parce_docs_path","title":"<code>DDYP_MKDOCS_CODE_PARCE_DOCS_PATH</code>","text":"<code>default: \"reference\"</code> <p>Documentation directory for displaying \"on-the-fly\" generated source documentation.</p>"},{"location":"dev/docs/#ddyp_mkdocs_code_parce_show_nav","title":"<code>DDYP_MKDOCS_CODE_PARCE_SHOW_NAV</code>","text":"<code>default: false</code> <p>Parameter for debugging generated \"on-the-fly\" navigation.</p>"},{"location":"dev/docs/#ddyp_mkdocs_enabled_git_revision_date","title":"<code>DDYP_MKDOCS_ENABLED_GIT_REVISION_DATE</code>","text":"<code>default: true</code> <p>Option to enable/disable modification dates for documentation files. It will be useful to disable it when developing locally so that the console is not clogged with errors.</p>"},{"location":"dev/docs/#ddyp_mkdocs_offline","title":"<code>DDYP_MKDOCS_OFFLINE</code>","text":"<code>default: false</code> <p>Parameter for building documentation into a build working from a folder, without the need to start the server. read more about the mechanism here.</p>"},{"location":"dev/docs/#ddyp_mkdocs_enable_minify","title":"<code>DDYP_MKDOCS_ENABLE_MINIFY</code>","text":"<code>default: true</code> <p>Parameter to enable plugin minify minifying html, js and css when generating documentation.</p> <p>When working with local server documentation, this option is disabled.</p>"},{"location":"dev/docs/#building-and-publishing","title":"Building and publishing","text":"<p>There is a separate <code>hatch run docs:build</code> command for building documentation.</p> <p>But before pushing the updated documentation, please run the <code>hatch run docs:build-check</code> command, it will build the documentation and check the links for broken ones.</p> <p>Documentation is collected in GitHub Actions and uploaded to the gh-pages branch and published using GitHub Pages.</p> <p>The documentation is automatically collected and rolled out when pushing the release tag (<code>v*</code>), and when pushing to the <code>dev</code> branch, the dev version of the documentation is updated.</p> <p>You can learn more about these processes in the releasel and dev workflow configs.</p>"},{"location":"dev/docs/examples/","title":"Examples of blocks for writing documentation","text":"<p>A collection of examples of non-obvious blocks that can be used when writing documentation.</p>"},{"location":"dev/docs/examples/#admonitions","title":"Admonitions","text":"<p>docs | supported types</p> CodePreview <pre><code>!!! note\n\n\tYou should note that the title will be automatically capitalized.\n</code></pre> <p>Note</p> <p>You should note that the title will be automatically capitalized.</p>"},{"location":"dev/docs/examples/#inline-usage","title":"inline usage","text":"inline end inline <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>!!! info inline end \"Lorem ipsum\"\n\n\tLorem ipsum dolor sit amet, consectetur\n\tadipiscing elit. Nulla et euismod nulla.\n\tCurabitur feugiat, tortor non consequat\n\tfinibus, justo purus auctor massa, nec\n\tsemper lorem quam in massa.\n</code></pre> <p>Use <code>inline end</code> to align to the right (left for rtl languages).</p> <p>Lorem ipsum</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>!!! info inline \"Lorem ipsum\"\n\n\tLorem ipsum dolor sit amet, consectetur\n\tadipiscing elit. Nulla et euismod nulla.\n\tCurabitur feugiat, tortor non consequat\n\tfinibus, justo purus auctor massa, nec\n\tsemper lorem quam in massa.\n</code></pre> <p>Use <code>inline</code> to align to the left (right for rtl languages).</p>"},{"location":"dev/docs/examples/#collapsible-blocks","title":"Collapsible blocks","text":"<p>docs</p> <pre><code>???+ note \"Open styled details\"\n\n\t??? danger \"Nested details!\"\n\t\tAnd more content again.\n</code></pre> Open styled details Nested details! <p>And more content again.</p>"},{"location":"dev/docs/examples/#footnotes","title":"Footnotes","text":"<p>docs</p> <pre><code>Footnotes[^1] have a label[^test-label] and the footnote's content.\n\n[^1]: This is a footnote content.\n[^test-label]: A footnote on the label: \"test-label\".\n</code></pre> <p>Footnotes<sup>1</sup> have a label<sup>2</sup> and the footnote's content.</p>"},{"location":"dev/docs/examples/#highlight","title":"Highlight","text":"<p>docs</p> CodePreview <pre><code>```console linenums=\"42\" hl_lines=\"1 4-6\"\n$ echo hello world!\nhello world!\n$ git clone git@github.com:dd/dd_yandex_pay.git\n$ cd dd_yandex_pay\n$ hatch run docs:serve\nINFO     -  Building documentation...\nINFO     -  Cleaning site directory\nINFO     -  mkdocstrings_handlers: Formatting signatures requires Black to be\n\t\t\tinstalled.\nINFO     -  Documentation built in 1.96 seconds\nINFO     -  [02:05:37] Watching paths for changes: 'docs/src', 'mkdocs.yml',\n\t\t\t'docs/theme', 'dd_yandex_pay', 'README.md'\nINFO     -  [02:05:37] Serving on http://127.0.0.1:7000/\n```\n</code></pre> <pre><code>```pycon\n&gt;&gt;&gt; for word in (\"Hello\", \"mkdocstrings!\"):\n...     print(word, end=\" \")\n...\nHello mkdocstrings!\n```\n</code></pre> <pre><code>$ echo hello world!\nhello world!\n$ git clone git@github.com:dd/dd_yandex_pay.git\n$ cd dd_yandex_pay\n$ hatch run docs:serve\nINFO     -  Building documentation...\nINFO     -  Cleaning site directory\nINFO     -  mkdocstrings_handlers: Formatting signatures requires Black to be\n\t\t\tinstalled.\nINFO     -  Documentation built in 1.96 seconds\nINFO     -  [02:05:37] Watching paths for changes: 'docs/src', 'mkdocs.yml',\n\t\t\t'docs/theme', 'dd_yandex_pay', 'README.md'\nINFO     -  [02:05:37] Serving on http://127.0.0.1:7000/\n</code></pre> <pre><code>&gt;&gt;&gt; for word in (\"Hello\", \"mkdocstrings!\"):\n...     print(word, end=\" \")\n...\nHello mkdocstrings!\n</code></pre>"},{"location":"dev/docs/examples/#inline","title":"Inline","text":"<p>docs</p> <pre><code>`#!console $ python3 -c \"import this\"`\n</code></pre> <p><code>$ python3 -c \"import this\"</code></p> <pre><code>`#!python3 import this`\n</code></pre> <p><code>import this</code></p>"},{"location":"dev/docs/examples/#annotates","title":"Annotates","text":"<p>docs</p> <pre><code>```python\nimport this # (1)\n```\n1.  :fontawesome-brands-python: Simple is better than complex.\n</code></pre> <pre><code>import this # (1)\n</code></pre> <ol> <li> Simple is better than complex.</li> </ol>"},{"location":"dev/docs/examples/#diagrams","title":"Diagrams","text":"<p>docs</p> <pre><code>```mermaid\ngraph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];\n```\n</code></pre> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"dev/docs/examples/#content-tabs","title":"Content tabs","text":"<p>docs</p> <pre><code>=== \"Tab 1\"\n\tMarkdown **content**.\n\n\tMultiple paragraphs.\n\n=== \"Tab 2\"\n\tMore Markdown **content**.\n\n- list item a\n\t- list item b\n</code></pre> Tab 1Tab 2 <p>Markdown content.</p> <p>Multiple paragraphs.</p> <p>More Markdown content.</p> <ul> <li>list item a</li> <li>list item b</li> </ul>"},{"location":"dev/docs/examples/#smart-symbols","title":"Smart Symbols","text":"<p>docs</p> Markdown Result Markdown Result <code>(tm)</code> \u2122 <code>&lt;--</code> \u2190 <code>(c)</code> \u00a9 <code>&lt;--&gt;</code> \u2194 <code>(r)</code> \u00ae <code>=/=</code> \u2260 <code>c/o</code> \u2105 <code>1/4, etc.</code> \u00bc, etc. <code>+/-</code> \u00b1 <code>1st 2nd etc.</code> 1<sup>st</sup> 2<sup>nd</sup> etc. <code>--&gt;</code> \u2192"},{"location":"dev/docs/examples/#keys","title":"Keys","text":"<p>docs</p> <pre><code>++ctrl+alt+delete++\n</code></pre> <p>Ctrl+Alt+Del</p>"},{"location":"dev/docs/examples/#icons-and-emojis","title":"Icons and Emojis","text":"<p>docs | icon search</p> <pre><code>:fontawesome-brands-twitter:{ .twitter } :smile: :heart: :thumbsup:\n</code></pre> <p> </p>"},{"location":"dev/docs/examples/#tooltips","title":"Tooltips","text":"<p>docs</p> <pre><code>[Hover me](https://example.com \"I'm a tooltip!\")\n</code></pre> <p>Hover me</p>"},{"location":"dev/docs/examples/#lists","title":"Lists","text":"<p>docs</p> CodePreview <pre><code>- [X] item 1\n\t* [X] item A\n\t* [ ] item B\n\t\tmore text\n\t\t+ [x] item a\n\t\t+ [ ] item b\n\t\t+ [x] item c\n\t* [X] item C\n- [ ] item 2\n- [ ] item 3\n</code></pre> <ul> <li> item 1<ul> <li> item A</li> <li> item B     more text<ul> <li> item a</li> <li> item b</li> <li> item c</li> </ul> </li> <li> item C</li> </ul> </li> <li> item 2</li> <li> item 3</li> </ul>"},{"location":"dev/docs/examples/#tables","title":"Tables","text":"<p>docs</p> CodePreview <pre><code>First Header | Second Header\n------------ | -------------\nContent Cell | Content Cell\nContent Cell | Content Cell\n</code></pre> First Header Second Header Content Cell Content Cell Content Cell Content Cell <ol> <li> <p>This is a footnote content.\u00a0\u21a9</p> </li> <li> <p>A footnote on the label: \"test-label\".\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>_init_.py</li> <li>client.py</li> </ul>"},{"location":"reference/dd_yandex_pay/__init__/","title":"__init__.py","text":""},{"location":"reference/dd_yandex_pay/__init__/#dd_yandex_pay","title":"dd_yandex_pay","text":""},{"location":"reference/dd_yandex_pay/__init__/#dd_yandex_pay.__version__","title":"__version__  <code>module-attribute</code>","text":"<pre><code>__version__ = '0.0.0.b0'\n</code></pre> <p>Version according to semver.</p> <p>To update the version, use hatch version</p> <p>show current version:</p> <pre><code>$ hatch version\n1.0.0a0\n</code></pre> <p>update patch and beta version from <code>1.0.0a0</code> to <code>1.0.1b0</code></p> <pre><code>$ hatch version patch,beta\nOld: 1.0.0a0\nNew: 1.0.1b0\n</code></pre>"},{"location":"reference/dd_yandex_pay/client/","title":"client.py","text":""},{"location":"reference/dd_yandex_pay/client/#dd_yandex_pay.client","title":"dd_yandex_pay.client","text":""},{"location":"reference/dd_yandex_pay/client/#dd_yandex_pay.client.YandexPayClient","title":"YandexPayClient","text":"<pre><code>YandexPayClient(api_key: str)\n</code></pre> <p>\u041a\u043b\u0438\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 Yandex Pay API.</p> Source code in <code>dd_yandex_pay/client.py</code> <pre><code>def __init__(self, api_key: str):\nself.api_key = api_key\n</code></pre>"},{"location":"usage/","title":"Getting Started","text":""},{"location":"usage/#installation","title":"Installation","text":"<pre><code>$ pip install dd_yandex_pay\n</code></pre>"}]}